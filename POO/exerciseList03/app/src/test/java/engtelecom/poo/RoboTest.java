/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package engtelecom.poo;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
// import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

class RoboTest {

  @Test
  public void turnAxisTest() {

    int[] location = { 50, 30 };
    Robo bot1 = new Robo("teste", 100, location, "norte", 20, 5);

    // Teste para esquerda;
    bot1.turnAxis("esquerda");
    assertEquals("oeste", bot1.getAtualDirection());

    // Teste para direita;
    bot1.turnAxis("direita");
    assertEquals("norte", bot1.getAtualDirection());

    // Teste para esquerda;
    bot1.turnAxis("esquerda");
    assertEquals("oeste", bot1.getAtualDirection());

    // Teste para esquerda;
    bot1.turnAxis("esquerda");
    assertEquals("sul", bot1.getAtualDirection());

    // Teste para direita;
    bot1.turnAxis("direita");
    assertEquals("oeste", bot1.getAtualDirection());

  }

  @Test
  public void walkTest() {

    int[] location = { 50, 50 };
    Robo bot1 = new Robo("teste", 100, location, "norte", 20, 5);

    // teste de movimentação;
    bot1.walk();
    assertEquals(50, bot1.getAtualLocation()[0]);
    assertEquals(55, bot1.getAtualLocation()[1]);

    bot1.turnAxis("esquerda");
    bot1.walk();

    assertEquals(45, bot1.getAtualLocation()[0]);
    assertEquals(55, bot1.getAtualLocation()[1]);


    bot1.turnAxis("esquerda");
    bot1.walk();

    assertEquals(45, bot1.getAtualLocation()[0]);
    assertEquals(50, bot1.getAtualLocation()[1]);
  

    // teste para limite de área;
    int[] location5 = { 90, 90 };
    Robo bot5 = new Robo("teste1", 100, location5, "norte", 20, 5);

    assertTrue(bot5.walk()); //dentro da área
    assertTrue(bot5.walk());  // dentro da área
    assertFalse(bot5.walk()); // fora da área


    // teste para limite de movimentação (dentro da área permitida;)
    int[] location6 = { 50, 50 };
    Robo bot6 = new Robo("teste1", 100, location6, "norte", 20, 1);

    for (int i = 20; i > 0; i--) {
      if(i>0){
        assertTrue(bot6.walk());
      }else{
        assertFalse(bot6.walk());
      }
    }
  }

  @Test
  public void loadExplorationTest() {

    int[] location = { 50, 50 };
    Robo bot = new Robo("teste1", 100, location, "norte", 20, 5);

    // Carregar arquivo corretamente;
    assertTrue(bot.loadExploration("MEDMEEMDM"));

    // Carregar arquivo incorretamente;
    assertFalse(bot.loadExploration("MASDSAESDAS"));
  }

  @Test
  public void runExplorationTest() {

    int[] location = { 50, 50 };
    Robo bot = new Robo("teste1", 100, location, "norte", 20, 5);

    bot.loadExploration("MEDMEEMDM");

    // testa a primeira tarefa;
    bot.runExploration();
    int[] newLocation = { 50, (50 + 5) };
    assertEquals(newLocation[0], bot.getAtualLocation()[0]);
    assertEquals(newLocation[1], bot.getAtualLocation()[1]);

    // testa a segunda tarefa;
    bot.runExploration();
    assertEquals("oeste", bot.getAtualDirection());

    // testa a terceira tarefa;
    bot.runExploration();
    assertEquals("norte", bot.getAtualDirection());

    // testa a quarta tarefa;
    bot.runExploration();
    int[] newLocation2 = { 50, (50 + 10) };
    assertEquals(newLocation2[0], bot.getAtualLocation()[0]);
    assertEquals(newLocation2[1], bot.getAtualLocation()[1]);

    // testa a quinta tarefa;
    bot.runExploration();
    assertEquals("oeste", bot.getAtualDirection());

    // testa a sexta tarefa;
    bot.runExploration();
    assertEquals("sul", bot.getAtualDirection());

    // testa a setima tarefa;
    bot.runExploration();
    int[] newLocation3 = { 50, (50 + 5) };
    assertEquals(newLocation3[0], bot.getAtualLocation()[0]);
    assertEquals(newLocation3[1], bot.getAtualLocation()[1]);

    // testa a oitava tarefa;
    bot.runExploration();
    assertEquals("oeste", bot.getAtualDirection());

    // testa a nona tarefa;
    bot.runExploration();
    int[] newLocation4 = { (50 - 5), (50 + 5) };
    assertEquals(newLocation4[0], bot.getAtualLocation()[0]);
    assertEquals(newLocation4[1], bot.getAtualLocation()[1]);

    // testa a execução de uma regra que não existe;
    assertFalse(bot.runExploration());

  }
}
